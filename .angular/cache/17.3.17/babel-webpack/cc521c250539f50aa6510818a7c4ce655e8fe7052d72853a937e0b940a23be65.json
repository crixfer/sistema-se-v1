{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class NotificationService {\n  constructor() {\n    this.notificationsSubject = new BehaviorSubject([]);\n    this.notifications$ = this.notificationsSubject.asObservable();\n    this.confirmationSubject = new BehaviorSubject(null);\n    this.confirmation$ = this.confirmationSubject.asObservable();\n    this.idCounter = 0;\n  }\n  // Método principal para mostrar notificaciones\n  show(notification) {\n    const newNotification = {\n      ...notification,\n      id: (++this.idCounter).toString(),\n      duration: notification.duration ?? 5000,\n      showCloseButton: notification.showCloseButton ?? true\n    };\n    const currentNotifications = this.notificationsSubject.value;\n    this.notificationsSubject.next([...currentNotifications, newNotification]);\n  }\n  // Métodos de conveniencia para notificaciones\n  success(title, message, duration) {\n    this.show({\n      type: 'success',\n      title,\n      message,\n      duration\n    });\n  }\n  error(title, message, duration) {\n    this.show({\n      type: 'error',\n      title,\n      message,\n      duration: duration ?? 7000 // Los errores duran más tiempo\n    });\n  }\n  warning(title, message, duration) {\n    this.show({\n      type: 'warning',\n      title,\n      message,\n      duration\n    });\n  }\n  info(title, message, duration) {\n    this.show({\n      type: 'info',\n      title,\n      message,\n      duration\n    });\n  }\n  // Método especial para éxito con símbolo de check\n  successWithCheck(title, message, duration) {\n    this.show({\n      type: 'success',\n      title: title.startsWith('✓') ? title : `✓ ${title}`,\n      message,\n      duration\n    });\n  }\n  // Cerrar una notificación específica\n  remove(id) {\n    const currentNotifications = this.notificationsSubject.value;\n    const filteredNotifications = currentNotifications.filter(n => n.id !== id);\n    this.notificationsSubject.next(filteredNotifications);\n  }\n  // Cerrar todas las notificaciones\n  clear() {\n    this.notificationsSubject.next([]);\n  }\n  // Método para confirmaciones personalizadas (reemplaza confirm() del navegador)\n  confirm(title, message, options) {\n    return new Promise(resolve => {\n      this.confirmationResolver = resolve;\n      const confirmationData = {\n        title,\n        message,\n        confirmText: options?.confirmText || 'Confirmar',\n        cancelText: options?.cancelText || 'Cancelar',\n        type: options?.type || 'default',\n        icon: options?.icon\n      };\n      this.confirmationSubject.next(confirmationData);\n    });\n  }\n  // Métodos de conveniencia para confirmaciones\n  confirmDanger(title, message, confirmText = 'Eliminar') {\n    return this.confirm(title, message, {\n      confirmText,\n      type: 'danger',\n      icon: 'fas fa-exclamation-triangle'\n    });\n  }\n  confirmWarning(title, message, confirmText = 'Continuar') {\n    return this.confirm(title, message, {\n      confirmText,\n      type: 'warning',\n      icon: 'fas fa-exclamation-triangle'\n    });\n  }\n  confirmSuccess(title, message, confirmText = 'Aceptar') {\n    return this.confirm(title, message, {\n      confirmText,\n      type: 'success',\n      icon: 'fas fa-check-circle'\n    });\n  }\n  // Resolver la confirmación\n  resolveConfirmation(result) {\n    if (this.confirmationResolver) {\n      this.confirmationResolver(result);\n      this.confirmationResolver = undefined;\n    }\n    this.confirmationSubject.next(null);\n  }\n  // Obtener la confirmación actual\n  getCurrentConfirmation() {\n    return this.confirmationSubject.value;\n  }\n  static {\n    this.ɵfac = function NotificationService_Factory(t) {\n      return new (t || NotificationService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: NotificationService,\n      factory: NotificationService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","NotificationService","constructor","notificationsSubject","notifications$","asObservable","confirmationSubject","confirmation$","idCounter","show","notification","newNotification","id","toString","duration","showCloseButton","currentNotifications","value","next","success","title","message","type","error","warning","info","successWithCheck","startsWith","remove","filteredNotifications","filter","n","clear","confirm","options","Promise","resolve","confirmationResolver","confirmationData","confirmText","cancelText","icon","confirmDanger","confirmWarning","confirmSuccess","resolveConfirmation","result","undefined","getCurrentConfirmation","factory","ɵfac","providedIn"],"sources":["C:\\Users\\comma\\OneDrive\\Documents\\CODING\\DESARROLLO\\Solicitudes\\project-bolt-sb1-xaykabqq\\project\\src\\app\\shared\\services\\notification.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { Notification } from '../components/notification/notification.component';\nimport { ConfirmationData } from '../components/confirmation-modal/confirmation-modal.component';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotificationService {\n  private notificationsSubject = new BehaviorSubject<Notification[]>([]);\n  public notifications$ = this.notificationsSubject.asObservable();\n\n  private confirmationSubject = new BehaviorSubject<ConfirmationData | null>(null);\n  public confirmation$ = this.confirmationSubject.asObservable();\n\n  private idCounter = 0;\n  private confirmationResolver?: (value: boolean) => void;\n\n  constructor() {}\n\n  // Método principal para mostrar notificaciones\n  show(notification: Omit<Notification, 'id'>): void {\n    const newNotification: Notification = {\n      ...notification,\n      id: (++this.idCounter).toString(),\n      duration: notification.duration ?? 5000, // 5 segundos por defecto\n      showCloseButton: notification.showCloseButton ?? true\n    };\n\n    const currentNotifications = this.notificationsSubject.value;\n    this.notificationsSubject.next([...currentNotifications, newNotification]);\n  }\n\n  // Métodos de conveniencia para notificaciones\n  success(title: string, message: string, duration?: number): void {\n    this.show({\n      type: 'success',\n      title,\n      message,\n      duration\n    });\n  }\n\n  error(title: string, message: string, duration?: number): void {\n    this.show({\n      type: 'error',\n      title,\n      message,\n      duration: duration ?? 7000 // Los errores duran más tiempo\n    });\n  }\n\n  warning(title: string, message: string, duration?: number): void {\n    this.show({\n      type: 'warning',\n      title,\n      message,\n      duration\n    });\n  }\n\n  info(title: string, message: string, duration?: number): void {\n    this.show({\n      type: 'info',\n      title,\n      message,\n      duration\n    });\n  }\n\n  // Método especial para éxito con símbolo de check\n  successWithCheck(title: string, message: string, duration?: number): void {\n    this.show({\n      type: 'success',\n      title: title.startsWith('✓') ? title : `✓ ${title}`,\n      message,\n      duration\n    });\n  }\n\n  // Cerrar una notificación específica\n  remove(id: string): void {\n    const currentNotifications = this.notificationsSubject.value;\n    const filteredNotifications = currentNotifications.filter(n => n.id !== id);\n    this.notificationsSubject.next(filteredNotifications);\n  }\n\n  // Cerrar todas las notificaciones\n  clear(): void {\n    this.notificationsSubject.next([]);\n  }\n\n  // Método para confirmaciones personalizadas (reemplaza confirm() del navegador)\n  confirm(\n    title: string, \n    message: string, \n    options?: {\n      confirmText?: string;\n      cancelText?: string;\n      type?: 'default' | 'danger' | 'warning' | 'success';\n      icon?: string;\n    }\n  ): Promise<boolean> {\n    return new Promise((resolve) => {\n      this.confirmationResolver = resolve;\n      \n      const confirmationData: ConfirmationData = {\n        title,\n        message,\n        confirmText: options?.confirmText || 'Confirmar',\n        cancelText: options?.cancelText || 'Cancelar',\n        type: options?.type || 'default',\n        icon: options?.icon\n      };\n\n      this.confirmationSubject.next(confirmationData);\n    });\n  }\n\n  // Métodos de conveniencia para confirmaciones\n  confirmDanger(title: string, message: string, confirmText: string = 'Eliminar'): Promise<boolean> {\n    return this.confirm(title, message, {\n      confirmText,\n      type: 'danger',\n      icon: 'fas fa-exclamation-triangle'\n    });\n  }\n\n  confirmWarning(title: string, message: string, confirmText: string = 'Continuar'): Promise<boolean> {\n    return this.confirm(title, message, {\n      confirmText,\n      type: 'warning',\n      icon: 'fas fa-exclamation-triangle'\n    });\n  }\n\n  confirmSuccess(title: string, message: string, confirmText: string = 'Aceptar'): Promise<boolean> {\n    return this.confirm(title, message, {\n      confirmText,\n      type: 'success',\n      icon: 'fas fa-check-circle'\n    });\n  }\n\n  // Resolver la confirmación\n  resolveConfirmation(result: boolean): void {\n    if (this.confirmationResolver) {\n      this.confirmationResolver(result);\n      this.confirmationResolver = undefined;\n    }\n    this.confirmationSubject.next(null);\n  }\n\n  // Obtener la confirmación actual\n  getCurrentConfirmation(): ConfirmationData | null {\n    return this.confirmationSubject.value;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}