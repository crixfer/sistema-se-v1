{"ast":null,"code":"import { of } from 'rxjs';\nimport { EstadoSolicitud, Prioridad } from '../models/solicitud.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./supabase.service\";\nexport class SolicitudesService {\n  constructor(supabase) {\n    this.supabase = supabase;\n    this.solicitudesDemo = [{\n      id: '1',\n      numero: 'SOL-2024-789456',\n      estudiante: {\n        nombre: 'María',\n        apellido: 'González Pérez',\n        cedula: '001-1234567-8',\n        matricula: '2021-0145',\n        carrera: 'Ingeniería en Sistemas',\n        telefono: '(809) 555-0123',\n        email: 'maria.gonzalez@estudiante.edu.do'\n      },\n      tipoServicio: 'record_notas',\n      descripcion: 'Solicito récord de notas completo para proceso de beca de estudios en el extranjero. Necesito que incluya todas las materias cursadas desde el primer semestre.',\n      fechaSolicitud: new Date('2024-06-20'),\n      fechaLimiteEsperada: new Date('2024-06-25'),\n      fechaCompletada: new Date('2024-06-23'),\n      estado: EstadoSolicitud.ENTREGADA,\n      prioridad: Prioridad.ALTA,\n      tiempoRespuesta: 3,\n      observaciones: 'Documento entregado exitosamente. Estudiante confirmó recepción.',\n      documentosRequeridos: ['Cédula de identidad', 'Recibo de pago'],\n      documentosEntregados: ['Cédula de identidad', 'Recibo de pago'],\n      responsableAsignado: 'Ana Rodríguez',\n      etapas: [],\n      costoServicio: 150.00\n    }, {\n      id: '2',\n      numero: 'SOL-2024-789457',\n      estudiante: {\n        nombre: 'Carlos',\n        apellido: 'Rodríguez Martínez',\n        cedula: '001-2345678-9',\n        matricula: '2020-0298',\n        carrera: 'Administración de Empresas',\n        telefono: '(829) 555-0456',\n        email: 'carlos.rodriguez@estudiante.edu.do'\n      },\n      tipoServicio: 'certificado_estudios',\n      descripcion: 'Necesito certificado de estudios para solicitud de empleo en empresa multinacional. Requiere apostillado.',\n      fechaSolicitud: new Date('2024-06-22'),\n      fechaLimiteEsperada: new Date('2024-06-29'),\n      estado: EstadoSolicitud.EN_PROCESO,\n      prioridad: Prioridad.NORMAL,\n      observaciones: 'En proceso de revisión por el departamento académico.',\n      documentosRequeridos: ['Cédula de identidad', 'Recibo de pago', 'Foto 2x2'],\n      documentosEntregados: ['Cédula de identidad', 'Recibo de pago'],\n      responsableAsignado: 'Luis Fernández',\n      etapas: [],\n      costoServicio: 200.00\n    }, {\n      id: '3',\n      numero: 'SOL-2024-789458',\n      estudiante: {\n        nombre: 'Ana',\n        apellido: 'Martínez López',\n        cedula: '001-3456789-0',\n        matricula: '2022-0087',\n        carrera: 'Psicología Clínica',\n        telefono: '(849) 555-0789',\n        email: 'ana.martinez@estudiante.edu.do'\n      },\n      tipoServicio: 'constancia_estudiante',\n      descripcion: 'Constancia de estudiante regular para solicitud de descuento estudiantil en transporte público.',\n      fechaSolicitud: new Date('2024-06-24'),\n      fechaLimiteEsperada: new Date('2024-06-26'),\n      estado: EstadoSolicitud.COMPLETADA,\n      prioridad: Prioridad.NORMAL,\n      observaciones: 'Documento listo para entrega.',\n      documentosRequeridos: ['Cédula de identidad', 'Recibo de pago'],\n      documentosEntregados: ['Cédula de identidad', 'Recibo de pago'],\n      responsableAsignado: 'Carmen Jiménez',\n      etapas: [],\n      costoServicio: 100.00\n    }, {\n      id: '4',\n      numero: 'SOL-2024-789459',\n      estudiante: {\n        nombre: 'Luis',\n        apellido: 'Pérez Santos',\n        cedula: '001-4567890-1',\n        matricula: '2019-0156',\n        carrera: 'Derecho',\n        telefono: '(809) 555-0321',\n        email: 'luis.perez@estudiante.edu.do'\n      },\n      tipoServicio: 'carta_presentacion',\n      descripcion: 'Carta de presentación para práctica profesional en bufete de abogados reconocido.',\n      fechaSolicitud: new Date('2024-06-21'),\n      fechaLimiteEsperada: new Date('2024-06-24'),\n      fechaCompletada: new Date('2024-06-23'),\n      estado: EstadoSolicitud.ENTREGADA,\n      prioridad: Prioridad.ALTA,\n      tiempoRespuesta: 2,\n      observaciones: 'Carta entregada. Estudiante muy satisfecho con el servicio.',\n      documentosRequeridos: ['Cédula de identidad', 'Recibo de pago'],\n      documentosEntregados: ['Cédula de identidad', 'Recibo de pago'],\n      responsableAsignado: 'Roberto Díaz',\n      etapas: [],\n      costoServicio: 75.00\n    }, {\n      id: '5',\n      numero: 'SOL-2024-789460',\n      estudiante: {\n        nombre: 'Carmen',\n        apellido: 'Jiménez Vargas',\n        cedula: '001-5678901-2',\n        matricula: '2021-0234',\n        carrera: 'Medicina',\n        telefono: '(829) 555-0654',\n        email: 'carmen.jimenez@estudiante.edu.do'\n      },\n      tipoServicio: 'certificado_conducta',\n      descripcion: 'Certificado de conducta para solicitud de residencia médica en hospital universitario.',\n      fechaSolicitud: new Date('2024-06-25'),\n      fechaLimiteEsperada: new Date('2024-07-02'),\n      estado: EstadoSolicitud.EN_REVISION,\n      prioridad: Prioridad.ALTA,\n      observaciones: 'Pendiente de revisión final por el decano.',\n      documentosRequeridos: ['Cédula de identidad', 'Recibo de pago', 'Foto 2x2'],\n      documentosEntregados: ['Cédula de identidad', 'Recibo de pago', 'Foto 2x2'],\n      responsableAsignado: 'Dr. Miguel Torres',\n      etapas: [],\n      costoServicio: 125.00\n    }, {\n      id: '6',\n      numero: 'SOL-2024-789461',\n      estudiante: {\n        nombre: 'Roberto',\n        apellido: 'Díaz Herrera',\n        cedula: '001-6789012-3',\n        matricula: '2020-0345',\n        carrera: 'Ingeniería Civil',\n        telefono: '(849) 555-0987',\n        email: 'roberto.diaz@estudiante.edu.do'\n      },\n      tipoServicio: 'historial_academico',\n      descripcion: 'Historial académico completo para solicitud de maestría en universidad extranjera. Debe incluir pensum y calificaciones detalladas.',\n      fechaSolicitud: new Date('2024-06-23'),\n      fechaLimiteEsperada: new Date('2024-07-05'),\n      estado: EstadoSolicitud.PENDIENTE_DOCUMENTOS,\n      prioridad: Prioridad.NORMAL,\n      observaciones: 'Falta entregar solicitud firmada por el estudiante.',\n      documentosRequeridos: ['Cédula de identidad', 'Recibo de pago', 'Solicitud firmada'],\n      documentosEntregados: ['Cédula de identidad', 'Recibo de pago'],\n      responsableAsignado: 'Ing. Patricia Morales',\n      etapas: [],\n      costoServicio: 300.00\n    }, {\n      id: '7',\n      numero: 'SOL-2024-789462',\n      estudiante: {\n        nombre: 'Patricia',\n        apellido: 'Morales Cruz',\n        cedula: '001-7890123-4',\n        matricula: '2022-0123',\n        carrera: 'Arquitectura',\n        telefono: '(809) 555-0147',\n        email: 'patricia.morales@estudiante.edu.do'\n      },\n      tipoServicio: 'reposicion_carnet',\n      descripcion: 'Reposición de carnet estudiantil extraviado durante viaje de estudios.',\n      fechaSolicitud: new Date('2024-06-26'),\n      fechaLimiteEsperada: new Date('2024-07-01'),\n      estado: EstadoSolicitud.RECIBIDA,\n      prioridad: Prioridad.NORMAL,\n      observaciones: 'Solicitud recibida, pendiente de procesamiento.',\n      documentosRequeridos: ['Cédula de identidad', 'Foto 2x2', 'Recibo de pago', 'Declaración jurada'],\n      documentosEntregados: ['Cédula de identidad', 'Foto 2x2'],\n      responsableAsignado: 'María Fernández',\n      etapas: [],\n      costoServicio: 200.00\n    }, {\n      id: '8',\n      numero: 'SOL-2024-789463',\n      estudiante: {\n        nombre: 'Miguel',\n        apellido: 'Torres Ramírez',\n        cedula: '001-8901234-5',\n        matricula: '2021-0456',\n        carrera: 'Contabilidad',\n        telefono: '(829) 555-0258',\n        email: 'miguel.torres@estudiante.edu.do'\n      },\n      tipoServicio: 'solicitud_beca',\n      descripcion: 'Solicitud de beca por excelencia académica. Promedio actual: 3.85/4.00. Situación económica familiar difícil.',\n      fechaSolicitud: new Date('2024-06-19'),\n      fechaLimiteEsperada: new Date('2024-07-15'),\n      estado: EstadoSolicitud.EN_PROCESO,\n      prioridad: Prioridad.ALTA,\n      observaciones: 'En evaluación por el comité de becas.',\n      documentosRequeridos: ['Cédula de identidad', 'Récord de notas', 'Declaración de ingresos', 'Carta de motivos'],\n      documentosEntregados: ['Cédula de identidad', 'Récord de notas', 'Declaración de ingresos', 'Carta de motivos'],\n      responsableAsignado: 'Comité de Becas',\n      etapas: [],\n      costoServicio: 0.00\n    }];\n  }\n  // Crear nueva solicitud\n  crearSolicitud(solicitud) {\n    // Simular creación con datos demo\n    const nuevaSolicitud = {\n      id: Date.now().toString(),\n      numero: this.generarNumeroSolicitud(),\n      estudiante: solicitud.estudiante,\n      tipoServicio: solicitud.tipoServicio,\n      descripcion: solicitud.descripcion,\n      fechaSolicitud: new Date(),\n      fechaLimiteEsperada: solicitud.fechaLimiteEsperada,\n      estado: EstadoSolicitud.RECIBIDA,\n      prioridad: solicitud.prioridad || Prioridad.NORMAL,\n      observaciones: solicitud.observaciones,\n      documentosRequeridos: solicitud.documentosRequeridos || [],\n      documentosEntregados: solicitud.documentosEntregados || [],\n      responsableAsignado: solicitud.responsableAsignado,\n      etapas: [],\n      costoServicio: solicitud.costoServicio\n    };\n    this.solicitudesDemo.unshift(nuevaSolicitud);\n    return of(nuevaSolicitud);\n  }\n  // Obtener todas las solicitudes\n  obtenerSolicitudes() {\n    return of([...this.solicitudesDemo]);\n  }\n  // Obtener solicitud por ID\n  obtenerSolicitudPorId(id) {\n    const solicitud = this.solicitudesDemo.find(s => s.id === id);\n    return of(solicitud || null);\n  }\n  // Actualizar estado de solicitud\n  actualizarEstadoSolicitud(id, estado, observaciones) {\n    const index = this.solicitudesDemo.findIndex(s => s.id === id);\n    if (index !== -1) {\n      this.solicitudesDemo[index] = {\n        ...this.solicitudesDemo[index],\n        estado,\n        observaciones: observaciones || this.solicitudesDemo[index].observaciones,\n        fechaCompletada: estado === EstadoSolicitud.COMPLETADA ? new Date() : this.solicitudesDemo[index].fechaCompletada,\n        tiempoRespuesta: estado === EstadoSolicitud.COMPLETADA ? Math.ceil((new Date().getTime() - this.solicitudesDemo[index].fechaSolicitud.getTime()) / (1000 * 60 * 60 * 24)) : this.solicitudesDemo[index].tiempoRespuesta\n      };\n      return of(this.solicitudesDemo[index]);\n    }\n    throw new Error('Solicitud no encontrada');\n  }\n  // Obtener estadísticas del dashboard\n  obtenerEstadisticas() {\n    const solicitudes = this.solicitudesDemo;\n    const total = solicitudes.length;\n    const completadas = solicitudes.filter(s => s.estado === EstadoSolicitud.COMPLETADA || s.estado === EstadoSolicitud.ENTREGADA).length;\n    const enProceso = solicitudes.filter(s => s.estado === EstadoSolicitud.EN_PROCESO || s.estado === EstadoSolicitud.EN_REVISION).length;\n    const pendientes = solicitudes.filter(s => s.estado === EstadoSolicitud.RECIBIDA || s.estado === EstadoSolicitud.PENDIENTE_DOCUMENTOS).length;\n    // Calcular tiempo promedio de respuesta\n    const solicitudesCompletadas = solicitudes.filter(s => s.tiempoRespuesta);\n    let tiempoPromedioRespuesta = 0;\n    if (solicitudesCompletadas.length > 0) {\n      const tiempoTotal = solicitudesCompletadas.reduce((acc, s) => acc + (s.tiempoRespuesta || 0), 0);\n      tiempoPromedioRespuesta = Math.round(tiempoTotal / solicitudesCompletadas.length * 10) / 10;\n    }\n    return of({\n      total,\n      completadas,\n      enProceso,\n      pendientes,\n      tiempoPromedioRespuesta\n    });\n  }\n  // Generar número de solicitud único\n  generarNumeroSolicitud() {\n    const año = new Date().getFullYear();\n    const timestamp = Date.now().toString().slice(-6);\n    return `SOL-${año}-${timestamp}`;\n  }\n  // Mapear datos de Supabase a modelo Solicitud (mantenido para compatibilidad)\n  mapToSolicitud(data) {\n    return {\n      id: data.id,\n      numero: data.numero,\n      estudiante: {\n        nombre: data.estudiante_nombre,\n        apellido: data.estudiante_apellido,\n        cedula: data.estudiante_cedula,\n        matricula: data.estudiante_matricula,\n        carrera: data.estudiante_carrera,\n        telefono: data.estudiante_telefono,\n        email: data.estudiante_email\n      },\n      tipoServicio: data.tipo_servicio,\n      descripcion: data.descripcion,\n      fechaSolicitud: new Date(data.fecha_solicitud),\n      fechaLimiteEsperada: data.fecha_limite_esperada ? new Date(data.fecha_limite_esperada) : undefined,\n      fechaCompletada: data.fecha_completada ? new Date(data.fecha_completada) : undefined,\n      estado: data.estado,\n      prioridad: data.prioridad,\n      tiempoRespuesta: data.tiempo_respuesta,\n      observaciones: data.observaciones,\n      documentosRequeridos: data.documentos_requeridos || [],\n      documentosEntregados: data.documentos_entregados || [],\n      responsableAsignado: data.responsable_asignado,\n      etapas: [],\n      costoServicio: data.costo_servicio,\n      created_at: data.created_at ? new Date(data.created_at) : undefined,\n      updated_at: data.updated_at ? new Date(data.updated_at) : undefined\n    };\n  }\n  static {\n    this.ɵfac = function SolicitudesService_Factory(t) {\n      return new (t || SolicitudesService)(i0.ɵɵinject(i1.SupabaseService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: SolicitudesService,\n      factory: SolicitudesService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["of","EstadoSolicitud","Prioridad","SolicitudesService","constructor","supabase","solicitudesDemo","id","numero","estudiante","nombre","apellido","cedula","matricula","carrera","telefono","email","tipoServicio","descripcion","fechaSolicitud","Date","fechaLimiteEsperada","fechaCompletada","estado","ENTREGADA","prioridad","ALTA","tiempoRespuesta","observaciones","documentosRequeridos","documentosEntregados","responsableAsignado","etapas","costoServicio","EN_PROCESO","NORMAL","COMPLETADA","EN_REVISION","PENDIENTE_DOCUMENTOS","RECIBIDA","crearSolicitud","solicitud","nuevaSolicitud","now","toString","generarNumeroSolicitud","unshift","obtenerSolicitudes","obtenerSolicitudPorId","find","s","actualizarEstadoSolicitud","index","findIndex","Math","ceil","getTime","Error","obtenerEstadisticas","solicitudes","total","length","completadas","filter","enProceso","pendientes","solicitudesCompletadas","tiempoPromedioRespuesta","tiempoTotal","reduce","acc","round","año","getFullYear","timestamp","slice","mapToSolicitud","data","estudiante_nombre","estudiante_apellido","estudiante_cedula","estudiante_matricula","estudiante_carrera","estudiante_telefono","estudiante_email","tipo_servicio","fecha_solicitud","fecha_limite_esperada","undefined","fecha_completada","tiempo_respuesta","documentos_requeridos","documentos_entregados","responsable_asignado","costo_servicio","created_at","updated_at","i0","ɵɵinject","i1","SupabaseService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\comma\\OneDrive\\Documents\\CODING\\DESARROLLO\\Solicitudes\\project-bolt-sb1-xaykabqq\\project\\src\\app\\core\\services\\solicitudes.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, from, map, catchError, of } from 'rxjs';\nimport { SupabaseService } from './supabase.service';\nimport { Solicitud, EstadoSolicitud, TipoServicio, Prioridad } from '../models/solicitud.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SolicitudesService {\n  private solicitudesDemo: Solicitud[] = [\n    {\n      id: '1',\n      numero: 'SOL-2024-789456',\n      estudiante: {\n        nombre: 'María',\n        apellido: 'González Pérez',\n        cedula: '001-1234567-8',\n        matricula: '2021-0145',\n        carrera: 'Ingeniería en Sistemas',\n        telefono: '(809) 555-0123',\n        email: 'maria.gonzalez@estudiante.edu.do'\n      },\n      tipoServicio: 'record_notas' as any,\n      descripcion: 'Solicito récord de notas completo para proceso de beca de estudios en el extranjero. Necesito que incluya todas las materias cursadas desde el primer semestre.',\n      fechaSolicitud: new Date('2024-06-20'),\n      fechaLimiteEsperada: new Date('2024-06-25'),\n      fechaCompletada: new Date('2024-06-23'),\n      estado: EstadoSolicitud.ENTREGADA,\n      prioridad: Prioridad.ALTA,\n      tiempoRespuesta: 3,\n      observaciones: 'Documento entregado exitosamente. Estudiante confirmó recepción.',\n      documentosRequeridos: ['Cédula de identidad', 'Recibo de pago'],\n      documentosEntregados: ['Cédula de identidad', 'Recibo de pago'],\n      responsableAsignado: 'Ana Rodríguez',\n      etapas: [],\n      costoServicio: 150.00\n    },\n    {\n      id: '2',\n      numero: 'SOL-2024-789457',\n      estudiante: {\n        nombre: 'Carlos',\n        apellido: 'Rodríguez Martínez',\n        cedula: '001-2345678-9',\n        matricula: '2020-0298',\n        carrera: 'Administración de Empresas',\n        telefono: '(829) 555-0456',\n        email: 'carlos.rodriguez@estudiante.edu.do'\n      },\n      tipoServicio: 'certificado_estudios' as any,\n      descripcion: 'Necesito certificado de estudios para solicitud de empleo en empresa multinacional. Requiere apostillado.',\n      fechaSolicitud: new Date('2024-06-22'),\n      fechaLimiteEsperada: new Date('2024-06-29'),\n      estado: EstadoSolicitud.EN_PROCESO,\n      prioridad: Prioridad.NORMAL,\n      observaciones: 'En proceso de revisión por el departamento académico.',\n      documentosRequeridos: ['Cédula de identidad', 'Recibo de pago', 'Foto 2x2'],\n      documentosEntregados: ['Cédula de identidad', 'Recibo de pago'],\n      responsableAsignado: 'Luis Fernández',\n      etapas: [],\n      costoServicio: 200.00\n    },\n    {\n      id: '3',\n      numero: 'SOL-2024-789458',\n      estudiante: {\n        nombre: 'Ana',\n        apellido: 'Martínez López',\n        cedula: '001-3456789-0',\n        matricula: '2022-0087',\n        carrera: 'Psicología Clínica',\n        telefono: '(849) 555-0789',\n        email: 'ana.martinez@estudiante.edu.do'\n      },\n      tipoServicio: 'constancia_estudiante' as any,\n      descripcion: 'Constancia de estudiante regular para solicitud de descuento estudiantil en transporte público.',\n      fechaSolicitud: new Date('2024-06-24'),\n      fechaLimiteEsperada: new Date('2024-06-26'),\n      estado: EstadoSolicitud.COMPLETADA,\n      prioridad: Prioridad.NORMAL,\n      observaciones: 'Documento listo para entrega.',\n      documentosRequeridos: ['Cédula de identidad', 'Recibo de pago'],\n      documentosEntregados: ['Cédula de identidad', 'Recibo de pago'],\n      responsableAsignado: 'Carmen Jiménez',\n      etapas: [],\n      costoServicio: 100.00\n    },\n    {\n      id: '4',\n      numero: 'SOL-2024-789459',\n      estudiante: {\n        nombre: 'Luis',\n        apellido: 'Pérez Santos',\n        cedula: '001-4567890-1',\n        matricula: '2019-0156',\n        carrera: 'Derecho',\n        telefono: '(809) 555-0321',\n        email: 'luis.perez@estudiante.edu.do'\n      },\n      tipoServicio: 'carta_presentacion' as any,\n      descripcion: 'Carta de presentación para práctica profesional en bufete de abogados reconocido.',\n      fechaSolicitud: new Date('2024-06-21'),\n      fechaLimiteEsperada: new Date('2024-06-24'),\n      fechaCompletada: new Date('2024-06-23'),\n      estado: EstadoSolicitud.ENTREGADA,\n      prioridad: Prioridad.ALTA,\n      tiempoRespuesta: 2,\n      observaciones: 'Carta entregada. Estudiante muy satisfecho con el servicio.',\n      documentosRequeridos: ['Cédula de identidad', 'Recibo de pago'],\n      documentosEntregados: ['Cédula de identidad', 'Recibo de pago'],\n      responsableAsignado: 'Roberto Díaz',\n      etapas: [],\n      costoServicio: 75.00\n    },\n    {\n      id: '5',\n      numero: 'SOL-2024-789460',\n      estudiante: {\n        nombre: 'Carmen',\n        apellido: 'Jiménez Vargas',\n        cedula: '001-5678901-2',\n        matricula: '2021-0234',\n        carrera: 'Medicina',\n        telefono: '(829) 555-0654',\n        email: 'carmen.jimenez@estudiante.edu.do'\n      },\n      tipoServicio: 'certificado_conducta' as any,\n      descripcion: 'Certificado de conducta para solicitud de residencia médica en hospital universitario.',\n      fechaSolicitud: new Date('2024-06-25'),\n      fechaLimiteEsperada: new Date('2024-07-02'),\n      estado: EstadoSolicitud.EN_REVISION,\n      prioridad: Prioridad.ALTA,\n      observaciones: 'Pendiente de revisión final por el decano.',\n      documentosRequeridos: ['Cédula de identidad', 'Recibo de pago', 'Foto 2x2'],\n      documentosEntregados: ['Cédula de identidad', 'Recibo de pago', 'Foto 2x2'],\n      responsableAsignado: 'Dr. Miguel Torres',\n      etapas: [],\n      costoServicio: 125.00\n    },\n    {\n      id: '6',\n      numero: 'SOL-2024-789461',\n      estudiante: {\n        nombre: 'Roberto',\n        apellido: 'Díaz Herrera',\n        cedula: '001-6789012-3',\n        matricula: '2020-0345',\n        carrera: 'Ingeniería Civil',\n        telefono: '(849) 555-0987',\n        email: 'roberto.diaz@estudiante.edu.do'\n      },\n      tipoServicio: 'historial_academico' as any,\n      descripcion: 'Historial académico completo para solicitud de maestría en universidad extranjera. Debe incluir pensum y calificaciones detalladas.',\n      fechaSolicitud: new Date('2024-06-23'),\n      fechaLimiteEsperada: new Date('2024-07-05'),\n      estado: EstadoSolicitud.PENDIENTE_DOCUMENTOS,\n      prioridad: Prioridad.NORMAL,\n      observaciones: 'Falta entregar solicitud firmada por el estudiante.',\n      documentosRequeridos: ['Cédula de identidad', 'Recibo de pago', 'Solicitud firmada'],\n      documentosEntregados: ['Cédula de identidad', 'Recibo de pago'],\n      responsableAsignado: 'Ing. Patricia Morales',\n      etapas: [],\n      costoServicio: 300.00\n    },\n    {\n      id: '7',\n      numero: 'SOL-2024-789462',\n      estudiante: {\n        nombre: 'Patricia',\n        apellido: 'Morales Cruz',\n        cedula: '001-7890123-4',\n        matricula: '2022-0123',\n        carrera: 'Arquitectura',\n        telefono: '(809) 555-0147',\n        email: 'patricia.morales@estudiante.edu.do'\n      },\n      tipoServicio: 'reposicion_carnet' as any,\n      descripcion: 'Reposición de carnet estudiantil extraviado durante viaje de estudios.',\n      fechaSolicitud: new Date('2024-06-26'),\n      fechaLimiteEsperada: new Date('2024-07-01'),\n      estado: EstadoSolicitud.RECIBIDA,\n      prioridad: Prioridad.NORMAL,\n      observaciones: 'Solicitud recibida, pendiente de procesamiento.',\n      documentosRequeridos: ['Cédula de identidad', 'Foto 2x2', 'Recibo de pago', 'Declaración jurada'],\n      documentosEntregados: ['Cédula de identidad', 'Foto 2x2'],\n      responsableAsignado: 'María Fernández',\n      etapas: [],\n      costoServicio: 200.00\n    },\n    {\n      id: '8',\n      numero: 'SOL-2024-789463',\n      estudiante: {\n        nombre: 'Miguel',\n        apellido: 'Torres Ramírez',\n        cedula: '001-8901234-5',\n        matricula: '2021-0456',\n        carrera: 'Contabilidad',\n        telefono: '(829) 555-0258',\n        email: 'miguel.torres@estudiante.edu.do'\n      },\n      tipoServicio: 'solicitud_beca' as any,\n      descripcion: 'Solicitud de beca por excelencia académica. Promedio actual: 3.85/4.00. Situación económica familiar difícil.',\n      fechaSolicitud: new Date('2024-06-19'),\n      fechaLimiteEsperada: new Date('2024-07-15'),\n      estado: EstadoSolicitud.EN_PROCESO,\n      prioridad: Prioridad.ALTA,\n      observaciones: 'En evaluación por el comité de becas.',\n      documentosRequeridos: ['Cédula de identidad', 'Récord de notas', 'Declaración de ingresos', 'Carta de motivos'],\n      documentosEntregados: ['Cédula de identidad', 'Récord de notas', 'Declaración de ingresos', 'Carta de motivos'],\n      responsableAsignado: 'Comité de Becas',\n      etapas: [],\n      costoServicio: 0.00\n    }\n  ];\n\n  constructor(private supabase: SupabaseService) {}\n\n  // Crear nueva solicitud\n  crearSolicitud(solicitud: Partial<Solicitud>): Observable<Solicitud> {\n    // Simular creación con datos demo\n    const nuevaSolicitud: Solicitud = {\n      id: Date.now().toString(),\n      numero: this.generarNumeroSolicitud(),\n      estudiante: solicitud.estudiante!,\n      tipoServicio: solicitud.tipoServicio!,\n      descripcion: solicitud.descripcion!,\n      fechaSolicitud: new Date(),\n      fechaLimiteEsperada: solicitud.fechaLimiteEsperada,\n      estado: EstadoSolicitud.RECIBIDA,\n      prioridad: solicitud.prioridad || Prioridad.NORMAL,\n      observaciones: solicitud.observaciones,\n      documentosRequeridos: solicitud.documentosRequeridos || [],\n      documentosEntregados: solicitud.documentosEntregados || [],\n      responsableAsignado: solicitud.responsableAsignado,\n      etapas: [],\n      costoServicio: solicitud.costoServicio\n    };\n\n    this.solicitudesDemo.unshift(nuevaSolicitud);\n    return of(nuevaSolicitud);\n  }\n\n  // Obtener todas las solicitudes\n  obtenerSolicitudes(): Observable<Solicitud[]> {\n    return of([...this.solicitudesDemo]);\n  }\n\n  // Obtener solicitud por ID\n  obtenerSolicitudPorId(id: string): Observable<Solicitud | null> {\n    const solicitud = this.solicitudesDemo.find(s => s.id === id);\n    return of(solicitud || null);\n  }\n\n  // Actualizar estado de solicitud\n  actualizarEstadoSolicitud(id: string, estado: EstadoSolicitud, observaciones?: string): Observable<Solicitud> {\n    const index = this.solicitudesDemo.findIndex(s => s.id === id);\n    if (index !== -1) {\n      this.solicitudesDemo[index] = {\n        ...this.solicitudesDemo[index],\n        estado,\n        observaciones: observaciones || this.solicitudesDemo[index].observaciones,\n        fechaCompletada: estado === EstadoSolicitud.COMPLETADA ? new Date() : this.solicitudesDemo[index].fechaCompletada,\n        tiempoRespuesta: estado === EstadoSolicitud.COMPLETADA ? \n          Math.ceil((new Date().getTime() - this.solicitudesDemo[index].fechaSolicitud.getTime()) / (1000 * 60 * 60 * 24)) : \n          this.solicitudesDemo[index].tiempoRespuesta\n      };\n      return of(this.solicitudesDemo[index]);\n    }\n    throw new Error('Solicitud no encontrada');\n  }\n\n  // Obtener estadísticas del dashboard\n  obtenerEstadisticas(): Observable<any> {\n    const solicitudes = this.solicitudesDemo;\n    const total = solicitudes.length;\n    const completadas = solicitudes.filter(s => s.estado === EstadoSolicitud.COMPLETADA || s.estado === EstadoSolicitud.ENTREGADA).length;\n    const enProceso = solicitudes.filter(s => \n      s.estado === EstadoSolicitud.EN_PROCESO || \n      s.estado === EstadoSolicitud.EN_REVISION\n    ).length;\n    const pendientes = solicitudes.filter(s => \n      s.estado === EstadoSolicitud.RECIBIDA || \n      s.estado === EstadoSolicitud.PENDIENTE_DOCUMENTOS\n    ).length;\n\n    // Calcular tiempo promedio de respuesta\n    const solicitudesCompletadas = solicitudes.filter(s => s.tiempoRespuesta);\n    let tiempoPromedioRespuesta = 0;\n    if (solicitudesCompletadas.length > 0) {\n      const tiempoTotal = solicitudesCompletadas.reduce((acc, s) => acc + (s.tiempoRespuesta || 0), 0);\n      tiempoPromedioRespuesta = Math.round((tiempoTotal / solicitudesCompletadas.length) * 10) / 10;\n    }\n\n    return of({\n      total,\n      completadas,\n      enProceso,\n      pendientes,\n      tiempoPromedioRespuesta\n    });\n  }\n\n  // Generar número de solicitud único\n  private generarNumeroSolicitud(): string {\n    const año = new Date().getFullYear();\n    const timestamp = Date.now().toString().slice(-6);\n    return `SOL-${año}-${timestamp}`;\n  }\n\n  // Mapear datos de Supabase a modelo Solicitud (mantenido para compatibilidad)\n  private mapToSolicitud(data: any): Solicitud {\n    return {\n      id: data.id,\n      numero: data.numero,\n      estudiante: {\n        nombre: data.estudiante_nombre,\n        apellido: data.estudiante_apellido,\n        cedula: data.estudiante_cedula,\n        matricula: data.estudiante_matricula,\n        carrera: data.estudiante_carrera,\n        telefono: data.estudiante_telefono,\n        email: data.estudiante_email\n      },\n      tipoServicio: data.tipo_servicio,\n      descripcion: data.descripcion,\n      fechaSolicitud: new Date(data.fecha_solicitud),\n      fechaLimiteEsperada: data.fecha_limite_esperada ? new Date(data.fecha_limite_esperada) : undefined,\n      fechaCompletada: data.fecha_completada ? new Date(data.fecha_completada) : undefined,\n      estado: data.estado,\n      prioridad: data.prioridad,\n      tiempoRespuesta: data.tiempo_respuesta,\n      observaciones: data.observaciones,\n      documentosRequeridos: data.documentos_requeridos || [],\n      documentosEntregados: data.documentos_entregados || [],\n      responsableAsignado: data.responsable_asignado,\n      etapas: [],\n      costoServicio: data.costo_servicio,\n      created_at: data.created_at ? new Date(data.created_at) : undefined,\n      updated_at: data.updated_at ? new Date(data.updated_at) : undefined\n    };\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}